<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="  
    http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/mvc    
    http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- 开启shiro aop拦截 -->
	<aop:config proxy-target-class="true"></aop:config>
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<context:component-scan base-package="dlnu.workload.module.*.controller" />

	<context:annotation-config />
	<mvc:annotation-driven />

	<mvc:resources mapping="/images/**" location="/public/images/"
		cache-period="31556926" />
	<mvc:resources mapping="/js/**" location="/public/js/"
		cache-period="31556926" />
	<mvc:resources mapping="/css/**" location="/public/css/"
		cache-period="31556926" />
	<mvc:resources mapping="/fonts/**" location="/public/fonts/"
		cache-period="31556926" />
	<mvc:resources mapping="/3-plugs/**" location="/public/3-plugs/"
		cache-period="31556926" />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 默认的注解映射的支持 -->
	<mvc:annotation-driven validator="validator"
		conversion-service="conversion-service" />

	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--不设置则默认为classpath下的 ValidationMessages.properties -->
		<property name="validationMessageSource" ref="validatemessageSource" />
	</bean>
	<bean id="conversion-service"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean" />
	<bean id="validatemessageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:ValidationMessages.properties" />
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean>

	<!-- 输出对象转JSON支持 <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean> 
		<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list> <ref bean="stringConverter" /> 
		<ref bean="jsonConverter" /> </list> </property> </bean> -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<!-- 返回json 方法二 需要导入 jackson-annotations.jar,jackson-core.jar,jackson-databind.jar -->
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<constructor-arg value="UTF-8" />
					<property name="supportedMediaTypes">
						<list>
							<value>text/html; charset=UTF-8</value>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
				</bean>
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html; charset=UTF-8</value>
							<value>application/json;charset=UTF-8</value>
						</list>
					</property>
					<property name="objectMapper">
						<bean class="dlnu.workload.framework.page.jackson2.PageListJsonMapper" />
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 异常 -->
	<bean id="exceptionResolver"
		class="dlnu.workload.framework.exception.handle.CustomSimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="dlnu.workload.framework.exception.SystemException">/WEB-INF/views/error/500</prop>
				<prop key="dlnu.workload.framework.exception.BusinessException">/WEB-INF/views/error/errorpage</prop>
				<prop key="java.lang.exception">/WEB-INF/views/error/500</prop>
			</props>
		</property>
	</bean>

	<!--配置拦截器, 多个拦截器,顺序执行 -->
	<!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->
	<!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller <mvc:interceptors> <mvc:interceptor> 
		<mvc:mapping path="/**" /> <mvc:exclude-mapping path="/" /> <mvc:exclude-mapping 
		path="/js/**" /> <mvc:exclude-mapping path="/css/**" /> <mvc:exclude-mapping 
		path="/images/**" /> <mvc:exclude-mapping path="/fonts/**" /> <mvc:exclude-mapping 
		path="/view/login" /> <mvc:exclude-mapping path="/api/login" /> <bean class=" 
		weber.framework.interceptor.LoginInterceptor "> </bean> </mvc:interceptor> 
		</mvc:interceptors> -->
</beans>